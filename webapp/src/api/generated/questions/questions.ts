/*
 * Generated by orval v5.5.10 üç∫
 * Do not edit manually.
 * Questions example
 * The questions API description
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from "react-query";
import type {
  Question,
  CreateQuestionDto,
  Personality,
  ComputePersonalityDto
} from "./model";
import { axiosClient } from "../../axios/axiosClient";

type AsyncReturnType<
  T extends (...args: any) => Promise<any>,
  U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;

type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const createQuestion = <TData = Question>(
  createQuestionDto: CreateQuestionDto,
  options?: SecondParameter<typeof axiosClient>
) => {
  return axiosClient<TData>(
    { url: `/questions`, method: "post", data: createQuestionDto },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useCreateQuestion = <
  TData = AsyncReturnType<typeof createQuestion, Question>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: CreateQuestionDto },
    TContext
  >;
  request?: SecondParameter<typeof axiosClient>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { data: CreateQuestionDto }, TContext>(
    (props) => {
      const { data } = props || {};

      return createQuestion<TData>(data, requestOptions);
    },
    mutationOptions
  );
};
export const getAllQuestions = <TData = Question[]>(
  options?: SecondParameter<typeof axiosClient>
) => {
  return axiosClient<TData>(
    { url: `/questions`, method: "get" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const getGetAllQuestionsQueryKey = () => [`/questions`];

export const useGetAllQuestions = <
  TQueryFnData = AsyncReturnType<typeof getAllQuestions, Question[]>,
  TError = unknown,
  TData = TQueryFnData
>(options?: {
  query?: UseQueryOptions<TQueryFnData, TError, TData>;
  request?: SecondParameter<typeof axiosClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAllQuestionsQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(
    queryKey,
    () => getAllQuestions<TQueryFnData>(requestOptions),
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

export const questionsControllerRemoveAll = <TData = void>(
  options?: SecondParameter<typeof axiosClient>
) => {
  return axiosClient<TData>(
    { url: `/questions`, method: "delete" },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useQuestionsControllerRemoveAll = <
  TData = AsyncReturnType<typeof questionsControllerRemoveAll, void>,
  TError = unknown,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, TVariables, TContext>;
  request?: SecondParameter<typeof axiosClient>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, TVariables, TContext>(() => {
    return questionsControllerRemoveAll<TData>(requestOptions);
  }, mutationOptions);
};
export const computePersonality = <TData = Personality>(
  computePersonalityDto: ComputePersonalityDto,
  options?: SecondParameter<typeof axiosClient>
) => {
  return axiosClient<TData>(
    {
      url: `/questions/compute-personality`,
      method: "post",
      data: computePersonalityDto
    },
    // eslint-disable-next-line
    // @ts-ignore
    options
  );
};

export const useComputePersonality = <
  TData = AsyncReturnType<typeof computePersonality, Personality>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: ComputePersonalityDto },
    TContext
  >;
  request?: SecondParameter<typeof axiosClient>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options || {};

  return useMutation<TData, TError, { data: ComputePersonalityDto }, TContext>(
    (props) => {
      const { data } = props || {};

      return computePersonality<TData>(data, requestOptions);
    },
    mutationOptions
  );
};
